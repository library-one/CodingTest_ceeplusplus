# 백준 11401 이항계수의 범위가 큰 값을 -> 서로 서로수이거나 배수가 아닐 경우 페르마의 소정리 를 통해 
# p가 소수일 경우 모든 정수 a 에 대하여 a^p %p= a  이다  
# 혹은
# p가 소수이고 a가 p의 배수가 아니면 a^(p-1)%p = 1   
# 분할정복을 이용한 거듭제곱과 모듈러 연산을 이용해 크기가 큰 숫자도 빠르게 값을 구하게 만듦
c++
#include <iostream>

using namespace std;
long long N,K;
long long p = 1000000007;

//팩토리얼 제귀함수로 풂
long long fact(long long n){
    // 입력값이 0이거나 1 일때 1을 반환 (재귀함수)
    if(n <= 1) return 1;
    // 재귀함수n값을 곱한 후 모듈러 방식 사용
    return (fact(n-1)*n)%p;
}

//제곱함수
long long powll(long long n, long long k){
    if(k==1){
        return n;
    }
    //짝수일 경우
    if(k%2 == 0){
        long long t = powll(n,k/2);
        return (t*t)%p;
    }
    //홀수일 경우
    else{
        //제귀 1일때 종료
        return (powll(n,k-1)*n)%p;
        }
    }
//정답
long long solve(long long n, long long k) {
    return (fact(n) * powll((fact(k)*fact(n-k))%p, p-2))%p;
}
 
int main() {
    cin>>N>>K;
    cout<<solve(N, K);
}
