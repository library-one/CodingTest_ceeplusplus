// 이항계수란 주어진 집합에서 원하는 개수만큼 순서없이 뽑는 조합의 갯수를 뜻함 
// 이항 이란 한 개의 아이템에 대해서 뽑거나 뽑지않거나 두가지의 선택이 있기 때문에 붙은 단어이다. 
// 이항 계수 n개중에 k를 선택하는 조합의 갯수 는 (n-k)! * k! / n!  이다. 

//1. 가장 기본 분할 
//k가 0일 때 나 n과 n 이 같을때 1을 반환
//n과k의 이항계수는 (n-1,k) + (n-1,k-1) 일때 계산이됨 따라서 재귀함수 사용
//팩토리얼을 분해할때 사용함
int bino_dnc(int n, int k);
int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n, k;
    cin >> n >> k;
    cout << bino_dnc(n, k) % 1000000007;
    return 0;
}
//문제를 더 쪼개기 위해 사용 -> 자기자신을 호출하는 재귀함수 사용
//기저 사례 즉 자신을 호출할때 끝이 있을 구간을 설정
// 자기자신을 호출하여 값을 집어넣음 만약 n=3 k=3 일때 자기자신에 값을 집어넣어 -1-1-1식 들어가다 결국에는 기저 사례로 return
int bino_dnc(int n, int k)
{
    if (k == 0 || n == k) { return 1; }
    return bino_dnc(n-1,k)+bino_dnc(n-1,k-1);
}
// 이러한 단순 재귀함수를 통한 조합법 계산은 중복이 있기에 가성비가 떨어진다(효율성) 
// 그럼으로 제3 방식 동적계획법(DP,Dinamic Programing) 한문제를 여러개의 작은 문제로 나누어서 계산함을 포함시킨다. 

//2. 이항 계수 방법
// 동적 계산법 (큰문제를 작은문제로 나누어서 계산 = 점화식 사용) ,모듈러 방식(MOD,나머지)을 사용한 값 구할 때 나눔
// 빅오크기에서 첫번쨰보다 빠름 단 전채 갯수와 고를 숫자의 갯수가 10000을 못 넘어가는 제한이 잇음
#include <iostream>
#include <algorithm>
#include <queue>
#include <functional>
using namespace std;
//2번째 이항계수 동적 계획법
//n과k의 이항계수는 (n-1,k) + (n-1,k-1) 일때 계산이됨 따라서 재귀함수 사용
//Dynamic Programming -> 동적 계획법 = 줄여서 dp2차원배열로 만듦
//동적 계획법-> Memoization 을 통한 불필요한 중복 계산 제거 하는 알고리즘
//dp[i][j] = ->if(0<j<i)일떄 dp[i-1][i]+dp[i-1][j-1] 를 모듈러(나머지) 계산을 저장
//             ->if(j==0 or j==i 일때 1을 리턴 
//모듈러 방식 -> 결과값이 많아짐으로 계산함으로써 더 나은 범위를 나타나게 함
// 단점 = 입력 값 n, k 가 크면 제한이 생김 
const int MOD = 1e9+7; // 1e9+7 = 10000000007
int dp[1001][1001];

int bino_dp(int n, int k);
int main() {
    int n, k;
    cin >> n >> k;
    cout << bino_dp(n, k);

    return 0;
}

int bino_dp(int n, int k)
{
    for (int i = 1; i <= 1000; i++) {
        //선택할 갯수인 k 가 될때까지 이항 계수를 구함 
        //min(i,k)은 조건식 0<n<k 의 조건을 만족시켜야 되기 때문 
        for (int j = 0; j <= min(i, k); j++) {
            //dp[i][j] = ->if(0<j<i)일떄 dp[i-1][i]+dp[i-1][j-1] 를 모듈러(나머지) 계산을 저장
            //             ->if(j==0 or j==i 일때 1을 리턴 
            if (j == 0 || j  == i) { dp[i][j]=1; }
            else {
                //점화식에 모듈러 방식 적요
                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % MOD;
            }
        }
    }
    return dp[n][k];
}
